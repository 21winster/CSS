class Node:
    def __init__(self, data, fval):
        self.data = data
        self.fval = fval
    def generate_child(self):
        x, y = self.find('_')
        val_list = [[x, y - 1], [x, y + 1], [x - 1, y], [x + 1, y]]
        children = []
        for i in val_list:
            child = self.shuffle(x, y, i[0], i[1])
            if child is not None:
                child_node = Node(child, 0)
                children.append(child_node)
        return children 
    def shuffle(self, x1, y1, x2, y2):
        if 0 <= x2 < len(self.data) and 0 <= y2 < len(self.data):
            temp_puz = [row[:] for row in self.data]  
            temp_puz[x1][y1], temp_puz[x2][y2] = temp_puz[x2][y2], temp_puz[x1][y1]
            return temp_puz
        else:
            return None
    def find(self, x):
        for i in range(len(self.data)):
            for j in range(len(self.data)):
                if self.data[i][j] == x:
                    return i, j
class Puzzle:
    def __init__(self, size):
        self.n = size
        self.open = []
    def accept(self):
        puz = []
        for _ in range(self.n):
            temp = input().split(" ")
            puz.append(temp)
        return puz
    def f(self, start, goal):
        return self.h(start.data, goal) + start.fval
    def h(self, start, goal):
        return sum(start[i][j] != goal[i][j] and start[i][j] != '_' for i in range(self.n) for j in range(self.n))
    def process(self):
        print("Enter the start state matrix\n")
        start = self.accept()
        print("\nEnter the goal state matrix\n")
        goal = self.accept()
        start = Node(start, 0)
        start.fval = self.f(start, goal)
        self.open.append(start)
        print("\n")
        while True:
            cur = self.open[0]
            print("\n  | ")
            print("  | ")
            print(" \\\'/ \n")
            for i in cur.data:
                print(*i)
            if self.h(cur.data, goal) == 0:
                break
            for i in cur.generate_child():
                i.fval = self.f(i, goal)
                self.open.append(i)
            del self.open[0]
            self.open.sort(key=lambda x: x.fval)
puz = Puzzle(3)
puz.process()
